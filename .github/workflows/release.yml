name: Release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Package
        run: |
          BIN_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].targets[] | select(.kind[] == "bin") | .name')
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            tar -czf ${BIN_NAME}-${{ matrix.name }}.tar.gz -C target/${{ matrix.target }}/release ${BIN_NAME}
          else
            tar -czf ${BIN_NAME}-${{ matrix.name }}.tar.gz -C target/${{ matrix.target }}/release ${BIN_NAME}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: "*.tar.gz"
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  publish-cargo:
    name: Publish to Cargo
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts to release directory
        run: |
          mkdir -p release
          find artifacts -name "*.tar.gz" -exec mv {} release/ \;

      - name: Create checksums
        run: |
          cd release
          sha256sum *.tar.gz > checksums.txt

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/*.tar.gz
            release/checksums.txt
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # homebrew:
  #   name: Publish to Homebrew
  #   runs-on: ubuntu-latest
  #   needs: release
  #   steps:
  #     - name: Update Homebrew tap
  #       uses: Justintime50/homebrew-releaser@v2
  #       with:
  #         homebrew_owner: ${{ github.repository_owner }}
  #         homebrew_tap: homebrew-${{ github.event.repository.name }}
  #         github_token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
  #         commit_owner: ${{ github.actor }}
  #         commit_email: ${{ github.actor }}@users.noreply.github.com
  #         install: 'bin.install "${{ github.event.repository.name }}"'
  #         test: 'assert_match("", shell_output("${{ github.event.repository.name }} --version"))'
  #         target_darwin_amd64: true
  #         target_darwin_arm64: true
  #         target_linux_amd64: true
  #         target_linux_arm64: true
