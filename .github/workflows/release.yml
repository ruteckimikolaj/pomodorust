# This is a GitHub Actions workflow to build, test, and release your Rust project.
name: Release

# Controls when the action will run.
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: ["main"]
    # Also trigger on version tags like v1.2.3
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job runs tests and lints on every push
  test_and_lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install ALSA development libraries
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev

      - name: Run linter (clippy)
        run: cargo clippy -- -D warnings
      - name: Run tests
        run: cargo test

  # This job creates a release and builds binaries when a tag is pushed
  create_release:
    name: Create Release

    # It needs the test_and_lint job to succeed first
    needs: [test_and_lint]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Get release upload URL
        run: echo "UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV

      - name: Install ALSA development libraries
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev

      - uses: actions/checkout@v3

      # Build for Linux
      - name: Build for Linux (x86_64)
        run: |
          rustup target add x86_64-unknown-linux-gnu
          cargo build --release --target x86_64-unknown-linux-gnu
          tar -C target/x86_64-unknown-linux-gnu/release -czf pomodorust-linux-x86_64.tar.gz pomodorust

      # Build for macOS (Intel)
      - name: Build for macOS (x86_64)
        run: |
          rustup target add x86_64-apple-darwin
          cargo build --release --target x86_64-apple-darwin
          tar -C target/x86_64-apple-darwin/release -czf pomodorust-macos-x86_64.tar.gz pomodorust

      # Build for macOS (Apple Silicon)
      - name: Build for macOS (aarch64)
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
          tar -C target/aarch64-apple-darwin/release -czf pomodorust-macos-aarch64.tar.gz pomodorust

      # Upload all the binaries to the release
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./pomodorust-linux-x86_64.tar.gz
          asset_name: pomodorust-linux-x86_64.tar.gz
          asset_content_type: application/gzip
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./pomodorust-macos-x86_64.tar.gz
          asset_name: pomodorust-macos-x86_64.tar.gz
          asset_content_type: application/gzip
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./pomodorust-macos-aarch64.tar.gz
          asset_name: pomodorust-macos-aarch64.tar.gz
          asset_content_type: application/gzip

  # This job publishes the crate to crates.io
  publish_crate:
    name: Publish to crates.io
    # This job only runs when a new version tag is pushed
    if: startsWith(github.ref, 'refs/tags/')
    # It needs the release to be created first
    needs: [create_release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Publish
        # IMPORTANT: You need to add a secret named CARGO_REGISTRY_TOKEN to your repository
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish
